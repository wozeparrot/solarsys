#!/usr/bin/env bash
source "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/framework.bash"

# deploys all moons
function deploy_all {
    echo "[solarsys] Deploying all moons"

    local planets
    readarray -t planets <<< "$(get_planets | jq -c -r '.[]')"

    for planet in "${planets[@]}"; do
        local moons
        readarray -t moons <<< "$(get_moons "$planet" | jq -c -r '.[]')"

        for moon in "${moons[@]}"; do
            if [[ -z "$moon" ]]; then
                break
            fi

            ss deploy "$planet" "$moon"
        done
    done
}

# deploys all moons in a planet
function deploy_planet {
    local planet=$1

    # sanity check
    if ! has_planet "$planet"; then
        ercho "error~ Planet: |$planet| does not exist!"
        return 1
    fi

    echo "[solarsys] Deploying all moons in planet: |$planet|"

    local moons
    readarray -t moons <<< "$(get_moons "$planet" | jq -c -r '.[]')"

    for moon in "${moons[@]}"; do
        if [[ -z "$moon" ]]; then
            break
        fi

        ss deploy "$planet" "$moon"
    done
}

# deploys all moons with an orbit
function deploy_orbit {
    local orbit=$1

    echo "[solarsys] Deploying all moons with orbit: |$orbit|"

    local planets
    readarray -t planets <<< "$(get_planets | jq -c -r '.[]')"

    for planet in "${planets[@]}"; do
        local moons
        readarray -t moons <<< "$(get_moons "$planet" | jq -c -r '.[]')"

        for moon in "${moons[@]}"; do
            if [[ -z "$moon" ]]; then
                break
            fi

            local orbits
            readarray -t orbits <<< "$(get_orbits "$planet" "$moon" | jq -c -r '.[]')"

            if [[ ! "$(printf "_[%s]_" "${orbits[@]}")" =~ .*_\[$orbit\]_.* ]]; then
                continue
            fi

            ss deploy "$planet" "$moon"
        done
    done
}

function build_all {
    local output=$1

    echo "[solarsys] Building output: |$output| for all moons"

    kitty @ goto-layout grid

    local planets
    readarray -t planets <<< "$(get_planets | jq -c -r '.[]')"

    for planet in "${planets[@]}"; do
        local moons
        readarray -t moons <<< "$(get_moons "$planet" | jq -c -r '.[]')"

        for moon in "${moons[@]}"; do
            if [[ -z "$moon" ]]; then
                break
            fi

            # check if last planet and last moon
            if [[ "$planet" == "${planets[-1]}" ]] && [[ "$moon" == "${moons[-1]}" ]]; then
                ss build "$planet" "$moon" "$output"
            else
                kitty @ launch --title "$planet/$moon" --cwd current
                kitty @ send-text --match "title:$planet/$moon" "ss build $planet $moon $output\\n"
                kitty @ send-text --match "title:$planet/$moon" "exit\\n"
            fi
        done
    done
}

# prints usage of solarsys
function print_usage {
    ercho "Usage: $0 <subcommand>"
    ercho
    ercho "  Subcommand                     |  Description"
    ercho "--------------------------------------------------------------------------"
    ercho "  deploy-all                     |  Deploys all moons"
    ercho "  deploy-planet <planet>         |  Deploys all moons in <planet>"
    ercho "  deploy-orbit <orbit>           |  Deploys all moons with <orbit>"
    ercho "  build-all <output>             |  Builds <output> for all moons"
    exit 1
}

# main function
function main {
    # check if subcommand is set
    local subcommand=$1
    if [[ -z "$subcommand" ]]; then
        print_usage
    fi

    # switch on subcommand
    case "$subcommand" in
        deploy-all)
            deploy_all
            ;;
        deploy-planet)
            local planet=$2
            if [[ -z "$planet" ]]; then
                ercho "error~ No planet specified"
                ercho
                print_usage
            fi

            deploy_planet "$planet"
            ;;
        deploy-orbit)
            local orbit=$2
            if [[ -z "$orbit" ]]; then
                ercho "error~ No orbit specified"
                ercho
                print_usage
            fi

            deploy_orbit "$orbit"
            ;;
        build-all)
            local output=$2
            if [[ -z "$output" ]]; then
                ercho "error~ No output specified"
                ercho
                print_usage
            fi

            build_all "$output"
            ;;
        *)
            ercho "error~ Unknown subcommand: $subcommand"
            ercho
            print_usage
            ;;
    esac
}

# run main
main "$@"
