#!/usr/bin/env bash
source "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/framework.bash"

# deploys a single moon in a planet
function deploy {
    local planet=$1
    local moon=$2

    # sanity check
    if ! has_planet "$planet"; then
        ercho "error~ Planet: |$planet| does not exist!"
        return 1
    fi
    if ! has_moon "$planet" "$moon"; then
        ercho "error~ Moon: |$moon| does not exist for planet: |$planet|!"
        return 1
    fi

    echo "[solarsys] Deploying moon: |$moon| in planet: |$planet|"

    # check if we are deploying our current system
    if [[ "$moon" == "$(hostname)" ]]; then
        echo "[solarsys] Moon: |$moon| is the current system..."

        # wait for user response
        yes_or_no "[solarsys] Deploy?" || return

        # build and switch to new config
        local buildpath
        if buildpath="$(build_moon_output "$planet" "$moon" "config.system.build.toplevel")"; then
            echo "[solarsys] Press enter to continue..."
            read -r
            sudo bash <<EOF
nix-env -p /nix/var/nix/profiles/system --set "$buildpath"
"$buildpath"/bin/switch-to-configuration switch
EOF
        fi
    else # deploying remotely
        local trajectory
        trajectory="$(get_trajectory "$planet" "$moon")"

        if [[ -z "$(jq -c -r '.' <<< "$trajectory")" ]]; then
            ercho "warning~ Moon: |$moon| is set for a local trajectory, skipping."
            return
        fi

        local trajectory_host trajectory_port
        trajectory_host="$(jq -c -r '.host' <<< "$trajectory")"
        trajectory_port="$(jq -c -r '.port' <<< "$trajectory")"

        echo "[solarsys] Moon: |$moon| is at |$trajectory_host| on port |$trajectory_port|"

        # build config
        local buildpath
        if buildpath="$(build_moon_output "$planet" "$moon" "config.system.build.toplevel")"; then
            # copy built config
            NIX_SSHOPTS="-p $trajectory_port" nix copy --to "ssh://root@$trajectory_host" "$buildpath"
            # copy remote deploy script
            rsync -q -e "ssh -p $trajectory_port" "$(dirname "$0")/solarsys-remote.sh" "root@[$trajectory_host]:/tmp/solarsys-remote.sh"
            # send satellites
            send_satellites "$planet" "$moon" "$trajectory_host" "$trajectory_port"

            # deploy stage1 - testing config
            echo "[solarsys] Deploying & Testing Config"
            ssh -t "root@$trajectory_host" -p "$trajectory_port" "bash /tmp/solarsys-remote.sh d1 $buildpath" 2> /dev/null
            # wait to see if we can still connect
            echo "[solarsys] Waiting for reconnection..."
            retry 5 ssh -o ConnectTimeout=5 -q "root@$trajectory_host" -p "$trajectory_port" exit
            # deploy stage2 - real deploy
            echo "[solarsys] Deploying & Switching to Config"
            ssh -t "root@$trajectory_host" -p "$trajectory_port" "bash /tmp/solarsys-remote.sh d2 $buildpath" 2> /dev/null
            echo "[solarsys] Deployed moon: |$moon|"
        fi
    fi
}

# builds an output for a moon in a planet
function build {
    local planet=$1
    local moon=$2
    local output=$3

    # sanity check
    if ! has_planet "$planet"; then
        ercho "error~ Planet: |$planet| does not exist!"
        return 1
    fi
    if ! has_moon "$planet" "$moon"; then
        ercho "error~ Moon: |$moon| does not exist for planet: |$planet|!"
        return 1
    fi

    echo "[solarsys] Building output: |$output| for moon: |$moon| in planet: |$planet|"

    build_moon_output "$planet" "$moon" "$output"
}

# rolls back a moon in a planet
function rollback {
    local planet=$1
    local moon=$2

    # sanity check
    if ! has_planet "$planet"; then
        ercho "error~ Planet: |$planet| does not exist!"
        return 1
    fi
    if ! has_moon "$planet" "$moon"; then
        ercho "error~ Moon: |$moon| does not exist for planet: |$planet|!"
        return 1
    fi

    echo "[solarsys] Rolling back moon: |$moon| in planet: |$planet|"

    # check if we are testing our current system
    if [[ "$moon" == "$(hostname)" ]]; then
        echo "[solarsys] Moon: |$moon| is the current system..."

        # wait for user response
        yes_or_no "Rollback?" || return

        # rollback
        sudo bash <<EOF
nix-env -p /nix/var/nix/profiles/system --rollback
/nix/var/nix/profiles/system/bin/switch-to-configuration switch
EOF
    else # rolling back remotely
        local trajectory
        trajectory="$(get_trajectory "$planet" "$moon")"

        if [[ -z "$(jq -c -r '.' <<< "$trajectory")" ]]; then
            ercho "warning~ Moon: |$moon| is set for a local trajectory, skipping."
            return
        fi

        local trajectory_host trajectory_port
        trajectory_host="$(jq -c -r '.host' <<< "$trajectory")"
        trajectory_port="$(jq -c -r '.port' <<< "$trajectory")"

        echo "[solarsys] Moon: |$moon| is at |$trajectory_host| on port |$trajectory_port|"
    fi
}

# tests a single moon in a planet
function test_moon {
    local planet=$1
    local moon=$2

    # sanity check
    if ! has_planet "$planet"; then
        ercho "error~ Planet: |$planet| does not exist!"
        return 1
    fi
    if ! has_moon "$planet" "$moon"; then
        ercho "error~ Moon: |$moon| does not exist for planet: |$planet|!"
        return 1
    fi

    echo "[solarsys] Testing moon: |$moon| in planet: |$planet|"

    # check if we are testing our current system
    if [[ "$moon" == "$(hostname)" ]]; then
        echo "Moon: |$moon| is the current system..."

        # wait for user response
        yes_or_no "Test?" || return

        # build and test new config
        local buildpath
        if buildpath="$(build_moon_output "$planet" "$moon" "config.system.build.toplevel")"; then
            echo "[solarsys] Press enter to continue..."
            read -r
            sudo "$buildpath"/bin/switch-to-configuration test
        fi
    else # testing remotely
        local trajectory
        trajectory="$(get_trajectory "$planet" "$moon")"

        if [[ -z "$(jq -c -r '.' <<< "$trajectory")" ]]; then
            ercho "warning~ Moon: |$moon| is set for a local trajectory, skipping."
            return
        fi

        local trajectory_host trajectory_port
        trajectory_host="$(jq -c -r '.host' <<< "$trajectory")"
        trajectory_port="$(jq -c -r '.port' <<< "$trajectory")"

        echo "[solarsys] Moon: |$moon| is at |$trajectory_host| on port |$trajectory_port|"
    fi
}

# ssh to a moon in a planet
function ssh_moon {
    local planet=$1
    local moon=$2

    # sanity check
    if ! has_planet "$planet"; then
        ercho "error~ Planet: |$planet| does not exist!"
        return 1
    fi
    if ! has_moon "$planet" "$moon"; then
        ercho "error~ Moon: |$moon| does not exist for planet: |$planet|!"
        return 1
    fi

    # check if the moon we are trying to connect to is the current system
    if [[ "$moon" == "$(hostname)" ]]; then
        ercho "error~ Moon: |$moon| is the current system!"
    else
        local trajectory
        trajectory="$(get_trajectory "$planet" "$moon")"

        if [[ -z "$(jq -c -r '.' <<< "$trajectory")" ]]; then
            ercho "error~ Moon: |$moon| does not have a set trajectory!"
            return 1
        fi

        local trajectory_host trajectory_port
        trajectory_host="$(jq -c -r '.host' <<< "$trajectory")"
        trajectory_port="$(jq -c -r '.port' <<< "$trajectory")"

        echo "[solarsys] Moon: |$moon| is at |$trajectory_host| on port |$trajectory_port|"
        exec ssh -A "root@$trajectory_host" -p "$trajectory_port"
    fi
}

# send satellites to a moon in a planet
function satellites {
    local planet=$1
    local moon=$2

    # sanity check
    if ! has_planet "$planet"; then
        ercho "error~ Planet: |$planet| does not exist!"
        return 1
    fi
    if ! has_moon "$planet" "$moon"; then
        ercho "error~ Moon: |$moon| does not exist for planet: |$planet|!"
        return 1
    fi

    # check if the moon we are trying to connect to is the current system
    if [[ "$moon" == "$(hostname)" ]]; then
        ercho "error~ Moon: |$moon| is the current system!"
    else
        local trajectory
        trajectory="$(get_trajectory "$planet" "$moon")"

        if [[ -z "$(jq -c -r '.' <<< "$trajectory")" ]]; then
            ercho "error~ Moon: |$moon| does not have a set trajectory!"
            return 1
        fi

        local trajectory_host trajectory_port
        trajectory_host="$(jq -c -r '.host' <<< "$trajectory")"
        trajectory_port="$(jq -c -r '.port' <<< "$trajectory")"

        echo "[solarsys] Moon: |$moon| is at |$trajectory_host| on port |$trajectory_port|"
        send_satellites "$planet" "$moon" "$trajectory_host" "$trajectory_port"
    fi
}

# lists planets and moons
function list {
    local planets
    readarray -t planets <<< "$(get_planets | jq -c -r '.[]')"

    for planet in "${planets[@]}"; do
        echo "$planet"

        local moons
        readarray -t moons <<< "$(get_moons "$planet" | jq -c -r '.[]')"

        for i in "${!moons[@]}"; do
            if [[ -z "${moons[i]}" ]]; then
                break
            fi

            local trajectory
            trajectory="$(get_trajectory "$planet" "${moons[i]}")"

            if [[ -z "$(jq -c -r '.' <<< "$trajectory")" ]]; then
                trajectory="{\"host\":\"localhost\",\"port\":0}"
            fi

            if [[ "$((i + 1))" == "${#moons[@]}" ]]; then
                echo "└───${moons[i]} at [$(jq -c -r '.host' <<< "$trajectory")]:$(jq -c -r '.port' <<< "$trajectory") orbits $(get_orbits "$planet" "${moons[i]}")"
            else
                echo "├───${moons[i]} at [$(jq -c -r '.host' <<< "$trajectory")]:$(jq -c -r '.port' <<< "$trajectory") orbits $(get_orbits "$planet" "${moons[i]}")"
            fi
        done

        echo
    done
}

# returns json of planets and moons
function json {
    local planets
    readarray -t planets <<< "$(get_planets | jq -c -r '.[]')"

    local planets_json
    planets_json="$(for planet in "${planets[@]}"; do
        jq -c -r -n --argjson ms "$(get_moons "$planet")" "{""$planet"": \$ms}"
    done)"
    jq -c -r -s add <<< "$planets_json"
}

# prints usage of solarsys
function print_usage {
    ercho "Usage: $0 <subcommand>"
    ercho
    ercho "  Subcommand                     |  Description"
    ercho "--------------------------------------------------------------------------"
    ercho "  deploy <planet> <moon>         |  Deploys <moon> in <planet>"
    ercho "  build <planet> <moon> <output> |  Builds <output> for <moon> in <planet>"
    ercho "  rollback <planet> <moon>       |  Rolls back <moon> in <planet>"
    ercho "  test <planet> <moon>           |  Tests <moon> in <planet>"
    ercho "  ssh <planet> <moon>            |  SSH to <moon> in <planet>"
    ercho "  satellites <planet> <moon>     |  Send satellites to <moon> in <planet>"
    ercho "  update                         |  Updates and commits flake.lock"
    ercho "  list                           |  Lists planets and moons"
    ercho "  json                           |  Returns json of planets and moons"
    exit 1
}

# main function
function main {
    # check if subcommand is set
    local subcommand=$1
    if [[ -z "$subcommand" ]]; then
        print_usage
    fi

    # switch on subcommand
    case "$subcommand" in
        deploy)
            local planet=$2
            local moon=$3
            if [[ -z "$planet" ]] || [[ -z "$moon" ]]; then
                ercho "error~ No planet and/or moon specified"
                ercho
                print_usage
            fi

            deploy "$planet" "$moon"
            ;;
        build)
            local planet=$2
            local moon=$3
            local output=$4
            if [[ -z "$planet" ]] || [[ -z "$moon" ]] || [[ -z "$output" ]]; then
                ercho "error~ No planet, moon, and/or output specified"
                ercho
                print_usage
            fi

            build "$planet" "$moon" "$output"
            ;;

        rollback)
            local planet=$2
            local moon=$3
            if [[ -z "$planet" ]] || [[ -z "$moon" ]]; then
                ercho "error~ No planet and/or moon specified"
                ercho
                print_usage
            fi

            rollback "$planet" "$moon"
            ;;
        test)
            local planet=$2
            local moon=$3
            if [[ -z "$planet" ]] || [[ -z "$moon" ]]; then
                ercho "error~ No planet and/or moon specified"
                ercho
                print_usage
            fi

            test_moon "$planet" "$moon"
            ;;
        ssh)
            local planet=$2
            local moon=$3
            if [[ -z "$planet" ]] || [[ -z "$moon" ]]; then
                ercho "error! No planet and/or moon specified"
                ercho
                print_usage
            fi

            ssh_moon "$planet" "$moon"
            ;;
        satellites)
            local planet=$2
            local moon=$3
            if [[ -z "$planet" ]] || [[ -z "$moon" ]]; then
                ercho "error! No planet and/or moon specified"
                ercho
                print_usage
            fi

            satellites "$planet" "$moon"
            ;;
        update)
            nix flake update --commit-lock-file
            ;;
        list)
            list
            ;;
        json)
            json
            ;;
        *)
            ercho "error~ Unknown subcommand: $subcommand"
            ercho
            print_usage
            ;;
    esac
}

# run main
main "$@"
